[
  null,
  {
    "name": "----------LOADERS ----------",
    "temp": "",
    "event-type": "0",
    "_id": "dJtJk",
    "actions": []
  },
  {
    "name": "[A]LoadDatabase",
    "temp": "",
    "event-type": "1",
    "_id": "LoadSubs",
    "actions": [
      {
        "behavior": "1",
        "interpretation": "0",
        "code": "// Make sure it only runs once!!\n//------------\n\nif(!globalVars(\"loaddatabase\")){ \n  this.callNextAction(cache);\n  this.storeValue(true, 3,\"loaddatabase\", cache);\n}",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      },
      {
        "behavior": "1",
        "interpretation": "0",
        "code": "// This function loads the database \n// and also filters subscribers to make sure\n// they still exist\n\n// SETTINGS\nconst log_channel = \"449627638827450378\"; // #subscriptons\n\nconst token = \"mongodb://heroku_w28d3f0r:9dkkh2k2sbgc34pg0csiv1omsm@ds235850.mlab.com:35850/heroku_w28d3f0r\";\n\n// Dont change anything below this without knowing what to do!\n\nconsole.log(\"[DATABASE] Loading database..\")\n\nconst log = function(str) {\n    client.channels.get(log_channel).send(str);\n    console.log(str);\n}\n\nconst mongoose = require('mongoose');\n\nBot.Subscriber = mongoose.model('Subscriber', {\n    serverid: String,\n    channelid: String,\n    subbed: Boolean,\n    tag: String,\n    sub_types: String\n})\n\nBot.ToDo = mongoose.model('ToDo', {\n    name: String,\n    desc: String,\n    author: String\n})\n\nmongoose.connection.on('connected', x => console.log(\"[DATABASE] Connected to Database\"));\nmongoose.connection.on('error', x => console.error(\"[DATABASE] ERROR: \" + x));\nmongoose.connection.on('disconnected', x => console.log(\"[DATABASE] Disconnected From Database\"));\n\nmongoose.connect(token);\n\n\n// add subbed var if missing\nBot.Subscriber.find({ subbed: { $exists: false } }, function(err, subscribers) {\n    if (err) log(err.stack ? err.stack : err)   \n    if(subscribers){\n        subscribers.forEach(sub => {\n            if(sub){\n                sub.subbed = true;\n                sub.save((err) => { if (err) log(err.stack ? err.stack : err); });\t\n            }\n        })\n    }   \n});\n\n// add prefix var if missing\nBot.Subscriber.find({ tag: { $exists: false } }, function(err, subscribers) {\n    if (err) log(err.stack ? err.stack : err)   \n    if(subscribers){\n        subscribers.forEach(sub => {\n            if(sub){\n                sub.tag = process.env.BOT_TAG || Files.data.settings.tag;\n                sub.save((err) => { if (err) log(err.stack ? err.stack : err); });\t\n            }\n        })\n    }   \n});\n\n// add sub_types var if missing\nBot.Subscriber.find({ sub_types: { $exists: false } }, function(err, subscribers) {\n    if (err) log(err.stack ? err.stack : err)   \n    if(subscribers){\n        subscribers.forEach(sub => {\n            if(sub){\n                sub.sub_types = \"all\";\n                sub.save((err) => { if (err) log(err.stack ? err.stack : err); });\t\n            }\n        })\n    }   \n});\n\nBot.Subscriber.find({ subbed: true }, function(err, subscribers) {\n    if (err) log(err.stack ? err.stack : err)   \n    log(\"[DATABASE] Loaded \" + subscribers.length + \" Subscribers.\")\n    this.callNextAction(cache);\n}.bind(this));\n",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      },
      {
        "behavior": "1",
        "interpretation": "0",
        "code": "require(\"dotenv\").config();\n// This function loads the saved variables\n\n// SETTINGS\nconst log_channel = \"449627638827450378\"; // #subscriptons\n\nconst token = 'redis://h:p0a35e12bf35000ea4357514137bbe14c73bb1c67a292367655fb73121c29a601@ec2-52-202-215-145.compute-1.amazonaws.com:14649';\n\n// Dont change anything below this without knowing what to do!\n\nconsole.log(\"[REDIS] Loading Variables\")\n\nconst log = function(str) {\n    client.channels.get(log_channel).send(str);\n    console.log(str);\n}\n\nBot.Redis = require(\"redis\");\nBot.Saved = Bot.Redis.createClient(token)\n\nBot.Saved.on(\"error\", function (err) {\n    console.log(\"Error \" + err);\n});\n\nBot.Saved.on(\"ready\", function (err) {\n    if (err) return console.log(err);   \n    Bot.Saved.keys('*', function (err, keys) {\n      if (err) return console.log(err);\n      log(\"[REDIS] Loaded \" + keys.length + \" Saved Variables.\")\n    });  \n});\nthis.callNextAction(cache);\n      \n",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      },
      {
        "behavior": "0",
        "interpretation": "0",
        "code": "",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      }
    ]
  },
  {
    "name": "[B]LoadFunctionOverwrites",
    "temp": "",
    "event-type": "1",
    "_id": "LoadSubs",
    "actions": [
      {
        "behavior": "1",
        "interpretation": "0",
        "code": "// Make sure it only runs once!!\n//------------\n\nif(!globalVars(\"loadoverwrites\")){ \n  this.callNextAction(cache);\n  this.storeValue(true, 3,\"loadoverwrites\", cache);\n}",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      },
      {
        "behavior": "1",
        "interpretation": "0",
        "code": "// Bot.onMessage & Bot.checkCommand Overwrite\n\nBot.onMessage = function(msg) {\n\tif(!msg.author.bot) {\n\t\ttry {\n\t\t\tthis.checkCommand(msg, function(checked) {\n\t\t\t\tif(!checked) Bot.onAnyMessage(msg);\n\t\t\t});\t\t\t\t\t\t\t\n\t\t} catch(e) {\n\t\t\tconsole.error(e);\n\t\t}\n\t}\n};\nconsole.log('[Overwrites](Server Prefixes) Bot.onMessage Loaded');\n\nBot.checkCommand = function(msg, callback) {\n\ttry {\n\t\tconst defaultTag = process.env.BOT_TAG || Files.data.settings.tag;\n\t\tconst separator = Files.data.settings.separator || '\\\\s+';\n\t\n\t\tlet content = msg.content;\n\t\tlet guildid   = (msg.guild && msg.guild.id) ? msg.guild.id : \"000\";\n\t\n\t\tcontent = content.split(new RegExp(separator))[0];\n\t\n\t\tBot.Subscriber.findOne({ serverid: guildid },function(err, subscriber){\n\t\t\tif (err) log(err.stack ? err.stack : err);\n\t\t\n\t\t\tconst tag = (subscriber && subscriber.tag) ? subscriber.tag : defaultTag;\n\t\t\tif(tag){\t\n\n\t\t\t\tif(msg.guild) msg.guild.tag = tag;\t\n\n\t\t\t\tif(content.startsWith(tag)) {\t\t\t\t\n\t\t\t\t\tlet command = content.substring(tag.length);\n\t\t\t\t\tif(command) {       \n\t\t\t\t\t\tif(!Bot._caseSensitive) {\n\t\t\t\t\t\t\tcommand = command.toLowerCase();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst cmd = Bot.$cmds[command];\n\t\t\t\t\t\tif(cmd) {\t\t\t\t\n\t\t\t\t\t\t\t// metrics? get used commands here for metrics!\t\t\t\n\t\t\t\t\t\t\tActions.preformActions(msg, cmd);\n\t\t\t\t\t\t\tif(callback) callback(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\t\t\t\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\tif(callback) callback(false);\t\n\t\t});\n\t} catch (e) {\n\t\tconsole.error(e);\n\t}\n   \n};\nconsole.log('[Overwrites](Server Prefixes) Bot.checkCommand Loaded');\nthis.callNextAction(cache);",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      },
      {
        "behavior": "0",
        "interpretation": "0",
        "code": "// runs locally by itself\n// disables server prefixes if not on heroku\n//if not heroku, and it hasn't already set it\nif(!process.env.HEROKU){\n  if(!globalVars(\"noserverpref\") && bot.user.tag == \"Wrex and Ahlfs Test Bot#8705\"){\n    console.log(\"[LOCALONLY] Running locally as the dev bot, disabling server prefixes...\") \n    Bot.checkCommand = function(msg) {\n        let command = this.checkTag(msg.content);\n        if(command) {\n            if(!this._caseSensitive) {\n                command = command.toLowerCase();\n            }\n            const cmd = this.$cmds[command];\n            if(cmd) {\n                Actions.preformActions(msg, cmd);\n                return true;\n            }\n        }\n        return false;\n    };\n\n    Bot.checkTag = function(content) {\n        const tag = \"$\";\n        const separator = Files.data.settings.separator || '\\\\s+';\n        content = content.split(new RegExp(separator))[0];\n        if(content.startsWith(tag)) {\n            return content.substring(tag.length);\n        }\n        return null;\n    };\n    this.storeValue(true, 3,\"noserverpref\", cache);\n  }\n} \n",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      }
    ]
  },
  {
    "name": "[C]LoadWebserver",
    "temp": "",
    "event-type": "1",
    "_id": "fQQZm",
    "actions": [
      {
        "behavior": "1",
        "interpretation": "0",
        "code": "// This script makes sure that it actually only runs once\n// put others after this Run Script!\nif(!globalVars(\"webhook_server\")){\n    this.callNextAction(cache)\n    this.storeValue(\"started!!\", 3, \"webhook_server\", cache)\n}",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      },
      {
        "behavior": "1",
        "interpretation": "0",
        "code": "const log_channel = \"450745331244859413\"; // #subscriptons\n\nrequire('dotenv').config();\nconst express = require('express');\n\nconst app = express();\n\nvar cookieParser = require('cookie-parser');\n\nconst bodyParser = require('body-parser');\napp.use(bodyParser.json());\napp.use(bodyParser.text());\napp.use(bodyParser.urlencoded({extended: true}));\n\nvar cors = require('cors');\napp.use(cors());\n\nconst path = require('path');\n\nBot.sendToLogChannel = function(toSend){\n    let channel = client.channels.get(log_channel);\n    if(channel) channel.send(toSend).catch(err => console.error(err.stack ? err.stack : err))    \n}\n\n\napp.use(express.static(path.join(__dirname, 'website', 'public')));\napp.use(cookieParser());\n\napp.set('views', path.join(__dirname, 'website', 'views'));\napp.set('view engine', 'ejs');\napp.set('json spaces', 4);\n\n\napp.get('/', function(req, res) {\t\n    res.render('index');\t\n});\n\nlet request = require('request');\n\nconst runRQ = function(url, cb){\n  request.get({\n    method: 'GET',\n    url: 'https://api.heroku.com/' +url,\n    auth: {\n      'bearer': 'd3684e09-d4dd-4e65-8a61-4934fe70c047'\n    },\n    headers: {\n      'Accept':'application/vnd.heroku+json; version=3',\n    }\n  }, function (error, response, body) {\n    if (error) {\n      return console.error('heroku api failed:', error);\n    }\n\n    if(cb) cb(body);\n  })\n}\n\n\n// ------------------------ WEBHOOOOKIES --------------------------\n\n\n// endpoints\napp.post('/' + process.env.TWITTER_TOKEN + '/twitter', function (req, res) { \n    res.status(200).send({message: \"Thats the old way! Dont use it!\", status: \"OK\" }); \n})\n\n\n// endpoints\napp.post('/' + process.env.TWITTER_TOKEN + '/' + process.env.TOKEN  +'/twitter', function (req, res) {\n \n    try {\n        if (!req.body) {\n            return res.status(400).send('Bad Request')\n        }\n    \n        let out = req.body.message ? req.body.message.toString() : req.body\n\n        client.channels.get(log_channel).send(\"Sending Incoming Webhook to subscribers \"+ out)  \n        \n        Bot.Subscriber.find({subbed: true}, function(err, subscribers) {\n            if (err) log(err.stack ? err.stack : err)\n\n            if (subscribers.length > -1) {\n                for (var index = 0; index < subscribers.length; index++) {                        \n                    (function(index) {\n                        setTimeout(function() {\n                            let subscriber = subscribers[index];\n\n                            let channelid = subscriber.channelid;\n                            let serverid = subscriber.serverid;\n\n                            let channel = client.channels.get(channelid);\n\n                            if(channel){                                                 \n                                channel.send(out).catch(err => console.error(err.stack ? err.stack : err))                       \n                            }else{\n         \n                            }\n                        }, 2000 * index);\n                    })(index);\n                }                           \n            }         \n        });\n    \n        // the most basic response\n        res.status(200).send({message: req.body, status: \"OK\" });\n\n    } catch (error) {\n        res.status(200).send({message: error, status: \"ERROR\"})\n    }\n  \n})\n    \n\n\n\napp.post('/' + process.env.TWITTER_TOKEN + '/' + process.env.TOKEN  +'/ifttt', function (req, res) {\n\n    try {\n        if (!req.body) {\n            return res.status(400).send('Bad Request')\n        }\n        \n\n        if(!Bot.Subscriber) throw new Error(\"THE DATABASE IS NOT CONNECTED!\");\n\n        Bot.Subscriber.find({ subbed: true }, function(err, subscribers) {\t\t\t\n\t\t\tif (err) log(err.stack ? err.stack : err)\n\t\t\tif (subscribers.length > 0) {\n\t\t\t    client.channels.get(log_channel).send(\"[WEBHOOK] Sending IFTTT webhook to subscribers...\")\n\t\t\t\tfor (var index = 0; index < subscribers.length; index++) {                        \n\t\t\t\t\t(function(index) {\n\t\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\t\tlet subscriber = subscribers[index];\n\t\t\t\t\t\t\tif(subscriber && subscriber.channelid){\n\n                                let channel = client.channels.get(subscriber.channelid);\n                                let server  = client.guilds.get(subscriber.serverid);\n                               \n\t\t\t\t\t\t\t\tif(server && channel){  \n                                    \n                                    let canSendMessage = channel.permissionsFor(client.user).has(\"SEND_MESSAGES\");\n\n                                    if(canSendMessage){\n                                        client.channels.get(log_channel).send(\"[WEBHOOK] Sending IFTTT webhook to channel <#\" + channel.name + \"> on server (\"+server.id+\") \" + server.name);  \n                                        channel.send(req.body);   \n                                    }else{\n                                        \n                                        client.channels.get(log_channel).send(\"[WEBHOOK] Bot doesn't have SEND_MESSAGE or is not in a channel on server named (\"+server.id+\") \" + server.name);  \n                                    }\n                                      \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                                             \n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}                                       \n\t\t\t\t\t\t}, 1000 * index);\n\t\t\t\t\t})(index);\n\t\t\t\t}                           \n\t\t\t}         \n\t\t});\n        \n        res.status(200).send({message: req.body, status: \"OK\" });\n    } catch (error) {\n        res.status(200).send({message: error, status: \"ERROR\"})\n    }  \n})\n\napp.post('/' + process.env.TWITTER_TOKEN + '/' + process.env.TOKEN  +'/log', function (req, res) {\n\n    try {\n        if (!req.body) {\n            return res.status(400).send('Bad Request')\n        }\n        \n        Bot.sendToLogChannel(req.body);      \n       \n        res.status(200).send({message: req.body, status: \"OK\" });\n\n    } catch (error) {\n        console.error(error.stack ? error.stack : error)\n        res.status(200).send({message: error, status: \"ERROR\"})\n    }  \n})\nthis.lastVersion = 0;\n\napp.post('/' + process.env.TWITTER_TOKEN + '/' + process.env.TOKEN  +'/heroku', function (req, res) {\n  try {\n      if (!req.body) {\n          return res.status(400).send('Bad Request')\n      }\n      \n      let body = req.body;\n      let type = body.resource; //dyno, app, etc\n      let action = body.action;\n      let hookID = body.id;      \n      let appName = body.data.app.name;\n      let url = 'https://dashboard.heroku.com/apps/' + appName;\n      let gitUrl = 'https://git.heroku.com/'+appName+'.git';     \n      let description = body.data.description;\n      let version = body.data.version;   \n      let updatedAt = body.data.updated_at;       \n      let email = body.data.user.email;\n      let status = body.data.status;\n      let commitDescription = body.data.slug.commit_description;\n      let user = (email == \"bjdroot@gmail.com\" ? '211607587232153600' : '314216283484717057')\n      let avatar;\n\n      let saveString = appName + type + \"_version\";\n\n      Bot.Saved.get(saveString, function(err, reply) {\n\n        if(saveString != reply && action == \"update\"){\n           if(user == '211607587232153600'){\n                avatar =  'https://cdn.discordapp.com/avatars/211607587232153600/d2c245f4171d382c9aefcb86c3d98d8a.png'\n            }else{\n                avatar = 'https://cdn.discordapp.com/avatars/314216283484717057/3ab8377ad2d7260b9dafd15ced957f78.png'\n            }\n\n            let embed;\n            switch (type) {\n                case 'release':\n                embed = {\n                    \"embed\": {\n                    \"title\": appName + \" Updated!\",\n                    \"description\": appName + \" updated with commit: \\n\" + commitDescription,\n                    \"url\": url,\n                    \"color\": 6919813,\n                    \"timestamp\": updatedAt,\n                    \"footer\": {\n                        \"icon_url\": \"https://slack-files2.s3-us-west-2.amazonaws.com/avatars/2017-07-25/217380174275_0944fb02887caee6d4d8_512.png\",\n                        \"text\": \"Heroku Hooks\" \n                    },\n                    \"author\": {\n                        \"name\": (user == '211607587232153600' ? 'General Wrex' : 'Ahlfs'),\n                        \"url\": \"https://discordapp.com/users/\" + user,\n                        \"icon_url\": avatar\n                    },\n                    \"fields\": [\n                        {\n                        \"name\": \"Status\",\n                        \"value\": status.replace(/^\\w/, c => c.toUpperCase()),\n                        \"inline\": true\n                        },\n                        {\n                        \"name\": \"Version\",\n                        \"value\": version,\n                        \"inline\": true\n                        },\n                        {\n                        \"name\": \"Git Url\",\n                        \"value\": gitUrl\n                        }\n                    ]\n                    }\n                }\n                break;\n                case 'dyno':         \n                break;\n                case 'app':        \n                break;\n                case 'build':         \n                break;\n                default:\n                break;\n            }\n\n            console.dir(embed);\n            Bot.sendToLogChannel(embed); \n\n            Bot.Saved.set(saveString, version);\n        }\n\n      });\n\n      res.status(200).send({message: embed, status: \"SENT EMBED\" });\n  } catch (error) {\n      console.error(error.stack ? error.stack : error)\n      res.status(200).send({message: error, status: \"ERROR\"})\n  }  \n})\n\napp.use(function(req, res, next) {\n\tvar err = new Error('Not Found');\n\terr.status = 404;\n\tnext(err);\n});\n \n\napp.use(function(err, req, res, next) {\t\t\n\tres.status(err.status || 500);\t\t\t\t\n    res.render('error', {\n\t\tmessage: err.message, \n\t\tstatus: err.status,\n        stack: err.stack\n    });\n});\n\napp.listen(process.env.PORT || 45678, function () {\n    console.log('[WEBSERVER] Service Running.');\n})",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      }
    ]
  },
  {
    "name": "ReportErrors",
    "temp": "dbm_error",
    "event-type": "37",
    "_id": "Emzor",
    "actions": [
      {
        "behavior": "0",
        "interpretation": "0",
        "code": "const channel = server.channels.get(\"453375855725641740\")\n\nif(channel){\n  channel.send(new Date())\n  channel.send(dbm_error)\n  channel.send(js_error)\n\n}",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      }
    ],
    "temp2": "js_error"
  },
  {
    "name": "-------- SUBSCRIBERS --------",
    "temp": "",
    "event-type": "0",
    "_id": "EHMRT",
    "actions": []
  },
  {
    "name": "DeletedSubscriberChannel",
    "temp": "deleted",
    "event-type": "9",
    "_id": "LTlHC",
    "actions": [
      {
        "behavior": "0",
        "interpretation": "0",
        "code": "const channel = tempVars(\"deleted\");\n\nconst log_channel = \"450745331244859413\"; // #subscriptons\n\nfunction log(str) {\n    client.channels.get(log_channel).send(str);\n    console.log(str);\n}\n\ntry {\n    Bot.Subscriber.findOne({ serverid: channel.guild.id },function(err, subscriber){\n        if (err) log(err.stack ? err.stack : err)\n\n        if(subscriber && subscriber.serverid){\n\n            if(subscriber.subbed){   \n                subscriber.subbed = false; \n                subscriber.save((err) => {                 \n                    if (err) log(err.stack ? err.stack : err);\n                    log(\"[SUBSCRIBERS] Removing Subscription from server \"+ channel.guild.name + \".\")                    \n                });\t      \n            }\n\n        }else{\n            log(\"There was a problem with removing \" + channel.guild.name + \"'s subscription! The server doesn't exist! Or a another bot in the channel has the old subscription removal event!\")  \n        }\n    });\n} catch (error) {\n    console.error(error.stack ? error.stack : error)\n}",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      }
    ]
  },
  {
    "name": "------------CRONS----------------------",
    "temp": "",
    "event-type": "0",
    "_id": "dOYaR",
    "actions": []
  },
  {
    "name": "CronLoader",
    "permissions": "NONE",
    "restriction": "0",
    "_id": "crontest",
    "actions": [
      {
        "behavior": "1",
        "interpretation": "0",
        "code": "// Make sure it only runs once!!\nif(!globalVars(\"cronloader\")){ \n  this.callNextAction(cache);\n  this.storeValue(true, 3,\"cronloader\", cache);\n}",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      },
      {
        "behavior": "1",
        "interpretation": "0",
        "code": "const CronJob = require('cron').CronJob;\n\nfunction checkCron(cron){\n    try {\n        new CronJob(cron, function() {});\n        return true;\n    } catch(ex) {\n        return false;\n    }\n}\n\nconst log_channel = \"449627638827450378\";\nconst channel = client.channels.get(log_channel)\n\n\nlet crons = [];\nconst events = Files.data.commands.concat(Files.data.events);\nfor(var index in events) { \n    \n    if(events[index] && events[index].name.includes(\"cron_\") ) {\n        const name = events[index].name;\n        const cronString =  events[index]._id;\n\n        if(checkCron(cronString)){\n  \n            const CronJob = require('cron').CronJob;\n            \n            let actions = events[index].actions;\n\n            const job = new CronJob({\n                cronTime: cronString,\n                onTick: function() {       \n                    cache.temp = {};\n                    cache.temp[\"log_channel\"] = channel;\n                    console.log(\"[CRON] Tick Event: \" + name); \n                    //channel.send(\"[CRON] Tick Event: \" + name);\n                    const act = actions[0];\n                    if (actions && act && Actions.exists(act.name)) {                \n                        const cache2 = {\n                            actions: actions,\n                            index: 0,\n                            temp: cache.temp,\n                            server: server,\n                            msg: null\n                        }                \n                        Actions[act.name](cache2);                       \n                        Actions.callNextAction(cache); \n                    }\t\n                }.bind(this),\n                start: true,\n                timeZone: 'America/Los_Angeles'\n            });\n\n            crons.push(job);\n            console.log(\"[CRON] '\"+name+\"' Job \" + (job.running ? \"Online\" : \"Offline\"))\n\n        }else{\n            console.log(\"[CRON] Cron String in Event '\" + name + \"' _id in the RawData is Invalid: \" + cronString)\n        }       \n    }\n}",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      }
    ],
    "_aliases": [
      "gold",
      "gv"
    ],
    "event-type": "1"
  },
  {
    "name": "cron_backupsubs",
    "permissions": "NONE",
    "restriction": "0",
    "_id": "0 */8 * * *",
    "_timeRestriction": 2,
    "actions": [
      {
        "behavior": "0",
        "interpretation": "0",
        "code": "// backsup subscribers to #dailysubscriberbackups\nBot.Subscriber.find({ }, function(err, subscribers) {\n    if (err) log(err.stack ? err.stack : err)\n    let filename = \"serverdb \" + new Date().getTime() +\".json\";\n    require('fs').writeFileSync(filename ,JSON.stringify(subscribers, null, 2));\n    client.channels.get(\"456597623466491915\").send({\n        files: [\n            filename\n        ]\n    })\n});",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      }
    ],
    "event-type": "0"
  },
  {
    "name": "cron_serverstatus",
    "permissions": "NONE",
    "restriction": "0",
    "_id": "*/2 * * * *",
    "actions": [
      {
        "token": "",
        "user": "",
        "pass": "",
        "url": "https://live-services.elderscrollsonline.com/status/realms",
        "path": "$..response",
        "storage": "1",
        "varName": "status",
        "debugMode": "1",
        "headers": "",
        "name": "Store Json From WebAPI"
      },
      {
        "behavior": "1",
        "interpretation": "0",
        "code": "\n\n\nlet statusArray = [\n    tempVars(\"status\")[0][\"The Elder Scrolls Online (PS4 - EU)\"]   == \"UP\" ? \"Online\" : \"Offline\",\n    tempVars(\"status\")[0][\"The Elder Scrolls Online (PS4 - US)\"]   == \"UP\" ? \"Online\" : \"Offline\",\n    tempVars(\"status\")[0][\"The Elder Scrolls Online (PTS)\"]        == \"UP\" ? \"Online\" : \"Offline\",\n    tempVars(\"status\")[0][\"The Elder Scrolls Online (XBox - US)\"]  == \"UP\" ? \"Online\" : \"Offline\",\n    tempVars(\"status\")[0][\"The Elder Scrolls Online (NA)\"]         == \"UP\" ? \"Online\" : \"Offline\",\n    tempVars(\"status\")[0][\"The Elder Scrolls Online (EU)\"]         == \"UP\" ? \"Online\" : \"Offline\",\n    tempVars(\"status\")[0][\"The Elder Scrolls Online (XBox - EU)\"]  == \"UP\" ? \"Online\" : \"Offline\"\n];\n\nBot.Saved.get(\"server_status\", function(err, replies) {\n    let reply = replies.split(\"|\");\n\n    if(replies.length != statusArray.join(\"|\").length){\n        let newStatusArray = [];\n\n        for(var index in statusArray){\n            let item = statusArray[index];\n            if(statusArray[index] != reply[index]){\n                newStatusArray.push(item.replace(\"Online\",\"**Online** \").replace(\"Offline\",\"**Offline** \"));\n            }else{\n                newStatusArray.push(false);\n            }\n        }\n        Actions.storeValue(newStatusArray, 1, \"ttc\", cache);     \n        Actions.callNextAction(cache);\n        Bot.Saved.set(\"server_status\", statusArray.join(\"|\"));\n    }\n});",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      },
      {
        "title": "Server Status Change",
        "author": "ESO Assistant",
        "color": "#2256bf",
        "timestamp": "false",
        "url": "https://esoassistant.com",
        "authorIcon": "https://i.imgur.com/zQadp8w.png",
        "imageUrl": "",
        "thumbUrl": "",
        "storage": "1",
        "varName": "ttcprice",
        "name": "Create Embed Message"
      },
      {
        "storage": "1",
        "varName": "ttcprice",
        "fieldName": "Server Status",
        "message": "${(function(){ return tempVars(\"ttc\")[9]  ? tempVars(\"ttc\")[9]   + \" [PC/Mac] North-American Megaserver\" : \"\"})()} \n${(function(){ return tempVars(\"ttc\")[5]  ? tempVars(\"ttc\")[5]   + \" [PC/Mac] Public Test Server\"        : \"\"})()}  \n${(function(){ return tempVars(\"ttc\")[11]  ? tempVars(\"ttc\")[11]   +\" [PC/Mac] European Megaserver\"        : \"\"})()} \n${(function(){ return tempVars(\"ttc\")[1] ? tempVars(\"ttc\")[1]  +\" [PS4] European Megaserver\"           : \"\"})()}  \n${(function(){ return tempVars(\"ttc\")[3] ? tempVars(\"ttc\")[3]  +\" [PS4] North-American Megaserver\"     : \"\"})()} \n${(function(){ return tempVars(\"ttc\")[7]  ? tempVars(\"ttc\")[7]   +\" [XBOX One] North-American Megaserver\": \"\"})()}  \n${(function(){ return tempVars(\"ttc\")[13]  ? tempVars(\"ttc\")[13]   +\" [XBOX One] European Megaserver\"      : \"\"})()}  ",
        "inline": "1",
        "name": "Add Embed Field"
      },
      {
        "storage": "1",
        "varName": "ttcprice",
        "message": "via esoassistant.com  |  ESO Assistant",
        "footerIcon": "https://i.imgur.com/3bGaoaJ.png",
        "name": "Set Embed Footer"
      },
      {
        "behavior": "0",
        "interpretation": "0",
        "code": "// this RunScript goes at the end of every cron\n\nconst VarToSend = tempVars(\"ttcprice\");\n\nBot.Subscriber.find({ subbed: true }, function(err, subscribers) {\n    if (err) log(err.stack ? err.stack : err)\n\n    if (subscribers.length > -1) {\n        for (var index = 0; index < subscribers.length; index++) {                        \n            (function(index) {\n                setTimeout(function() {\n                    let subscriber = subscribers[index];\n\n                    let channelid = subscriber.channelid;\n                    let serverid = subscriber.serverid;\n                    let channel = client.channels.get(channelid);\n\n                    if(channel){                          \n                        channel.send(VarToSend).catch(err => console.log(\"Invalid message to send to subscribers! Error:\" + err))\n                    }else{\n         \n                    }\n                }, 1000 * index);\n             })(index);\n        }                           \n    }         \n});",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      }
    ],
    "comType": "0",
    "_aliases": [
      "week",
      "trials"
    ],
    "event-type": "0"
  },
  {
    "name": "cron_golden",
    "permissions": "NONE",
    "restriction": "0",
    "_id": "03 17 * * FRI",
    "actions": [
      {
        "url": "http://benevolentbowd.ca/games/esotu/esotu-chronicle-of-alliance-point-vendor-items/",
        "storage": "1",
        "varName": "mypage",
        "name": "Store HTML From Webpage"
      },
      {
        "debugMode": "1",
        "xpath": "//div[@class='entry-content']//ul[2]/li/text() |  //div[@class='entry-content']//h2[2]/text() | //div[@class='entry-content']//h3[1]/text()",
        "source": "1",
        "sourceVarName": "mypage",
        "storage": "1",
        "varName": "set",
        "name": "Parse From Stored Webpage"
      },
      {
        "title": "Golden Vender",
        "author": "ESO Assistant",
        "color": "#2256bf",
        "timestamp": "false",
        "url": "http://benevolentbowd.ca",
        "authorIcon": "https://i.imgur.com/zQadp8w.png",
        "imageUrl": "https://i.imgur.com/S760423.jpg",
        "thumbUrl": "https://i.imgur.com/PhV9o8S.png",
        "storage": "1",
        "varName": "setlist",
        "name": "Create Embed Message"
      },
      {
        "storage": "1",
        "varName": "setlist",
        "fieldName": "Items for the weekend of ${tempVars(\"set\")[1]}",
        "message": "**Locations** :  [DC](https://i.imgur.com/7P1loWW.png)  -  [EP](https://i.imgur.com/SH2gDXC.png)  -  [AD](https://i.imgur.com/Hl31kNT.png)\n\n${tempVars(\"set\")[2] || \"\"}\n${tempVars(\"set\")[3] || \"\"}\n${tempVars(\"set\")[4] || \"\"}\n${tempVars(\"set\")[5] || \"\"}\n\n${tempVars(\"set\")[6] || \"\"}\n\n${tempVars(\"set\")[7] || \"\"}\n\n${tempVars(\"set\")[8] || \"\"}\n\n${tempVars(\"set\")[9] || \"\"}\n",
        "inline": "1",
        "name": "Add Embed Field"
      },
      {
        "storage": "1",
        "varName": "setlist",
        "message": "via benevolentbowd.ca |  ESO Assistant",
        "footerIcon": "https://i.imgur.com/oYVP6Qj.png",
        "name": "Set Embed Footer"
      },
      {
        "behavior": "1",
        "interpretation": "0",
        "code": "// this RunScript goes at the end of every cron\n\nconst VarToSend = tempVars(\"setlist\");\n\nBot.Subscriber.find({ subbed: true }, function(err, subscribers) {\n    if (err) log(err.stack ? err.stack : err)\n\n    if (subscribers.length > -1) {\n        for (var index = 0; index < subscribers.length; index++) {                        \n            (function(index) {\n                setTimeout(function() {\n                    let subscriber = subscribers[index];\n\n                    let channelid = subscriber.channelid;\n                    let serverid = subscriber.serverid;\n                    let channel = client.channels.get(channelid);\n\n                    if(channel){                          \n                        channel.send(VarToSend).catch(err => console.log(\"Invalid message to send to subscribers!\"))\n                    }else{\n         \n                    }\n                }, 1000 * index);\n             })(index);\n        }                           \n    }         \n});",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      }
    ],
    "_aliases": [
      "gold",
      "gv"
    ],
    "event-type": "0"
  },
  {
    "name": "cron_weekly",
    "permissions": "NONE",
    "restriction": "0",
    "_id": "03 10 * * MON",
    "actions": [
      {
        "url": "https://esoleaderboards.com/",
        "storage": "1",
        "varName": "mypage",
        "name": "Store HTML From Webpage"
      },
      {
        "debugMode": "1",
        "xpath": "//*[@id=\"score_table\"]/tbody/tr[4]/td[4]/strong/text() | //*[@id=\"score_table\"]/tbody/tr[5]/td[4]/strong/text() | //*[@id=\"score_table\"]/tbody/tr[3]/td[2]/a/img/@src",
        "source": "1",
        "sourceVarName": "mypage",
        "storage": "1",
        "varName": "weekly",
        "name": "Parse From Stored Webpage"
      },
      {
        "token": "",
        "user": "",
        "pass": "",
        "url": "https://esoleaderboards.com/api/weekly?megaserver=na",
        "path": "",
        "storage": "1",
        "varName": "ahlfs",
        "debugMode": "1",
        "headers": "",
        "name": "Store Json From WebAPI"
      },
      {
        "title": "",
        "author": "ESO Assistant",
        "color": "#2256bf",
        "timestamp": "false",
        "url": "https://esoleaderboards.com",
        "authorIcon": "https://i.imgur.com/zQadp8w.png",
        "imageUrl": "${tempVars(\"weekly\")[0]}",
        "thumbUrl": "https://i.imgur.com/Mcjmmr0.png",
        "storage": "1",
        "varName": "embed",
        "name": "Create Embed Message"
      },
      {
        "storage": "1",
        "varName": "embed",
        "fieldName": "Trial of the Week",
        "message": "***${tempVars(\"ahlfs\") || \"\"}***",
        "inline": "1",
        "name": "Add Embed Field"
      },
      {
        "storage": "1",
        "varName": "embed",
        "fieldName": "**Highest Score**",
        "message": "***${tempVars(\"weekly\")[1] || \"\"}***",
        "inline": "0",
        "name": "Add Embed Field"
      },
      {
        "storage": "1",
        "varName": "embed",
        "fieldName": "**Lowest Score**",
        "message": "***${tempVars(\"weekly\")[2] || \"\"}***",
        "inline": "0",
        "name": "Add Embed Field"
      },
      {
        "storage": "1",
        "varName": "embed",
        "message": "via esoleaderboards.com |  ESO Assistant",
        "footerIcon": "https://i.imgur.com/oYVP6Qj.png",
        "name": "Set Embed Footer"
      },
      {
        "storage": "1",
        "varName": "embed",
        "channel": "5",
        "varName2": "chan",
        "name": "Send Embed Message"
      },
      {
        "behavior": "0",
        "interpretation": "0",
        "code": "// this RunScript goes at the end of every cron\n\nconst VarToSend = tempVars(\"setlist\");\n\nBot.Subscriber.find({ subbed: true }, function(err, subscribers) {\n    if (err) log(err.stack ? err.stack : err)\n\n    if (subscribers.length > -1) {\n        for (var index = 0; index < subscribers.length; index++) {                        \n            (function(index) {\n                setTimeout(function() {\n                    let subscriber = subscribers[index];\n\n                    let channelid = subscriber.channelid;\n                    let serverid = subscriber.serverid;\n                    let channel = client.channels.get(channelid);\n\n                    if(channel){                          \n                        channel.send(VarToSend).catch(err => console.log(\"Invalid message to send to subscribers!\"))\n                    }else{\n         \n                    }\n                }, 1000 * index);\n             })(index);\n        }                           \n    }         \n});",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      }
    ],
    "comType": "0",
    "_aliases": [
      "week",
      "trials"
    ],
    "event-type": "0"
  },
  {
    "name": "notice_disabled",
    "permissions": "NONE",
    "restriction": "0",
    "_id": "*/10 * * * *",
    "_timeRestriction": 2,
    "actions": [
      {
        "url": "https://forums.elderscrollsonline.com/en/",
        "storage": "1",
        "varName": "mypage2",
        "name": "Store HTML From Webpage"
      },
      {
        "debugMode": "0",
        "xpath": "//*[@class='DismissMessage AlertMessage']/text()[normalize-space()]",
        "source": "1",
        "sourceVarName": "mypage2",
        "storage": "1",
        "varName": "ttc2",
        "name": "Parse From Stored Webpage"
      },
      {
        "behavior": "1",
        "interpretation": "0",
        "code": "let status = (tempVars(\"ttc2\")[0]+tempVars(\"ttc2\")[1]+tempVars(\"ttc2\")[2]+tempVars(\"ttc2\")[3]+tempVars(\"ttc2\")[4]+tempVars(\"ttc2\")[5]);\n\nBot.Saved.get(\"server_notice\", function(err, reply) {\n    if(status !== reply){\n      Actions.callNextAction(cache);\n      Bot.Saved.set(\"server_notice\", status);\n    }\n});\n\n\n\n",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      },
      {
        "title": "forums.elderscrollsonline.com",
        "author": "ESO Assistant",
        "color": "#2256bf",
        "timestamp": "false",
        "url": "https://forums.elderscrollsonline.com",
        "authorIcon": "https://i.imgur.com/zQadp8w.png",
        "imageUrl": "",
        "thumbUrl": "https://i.imgur.com/vYUhvbf.png",
        "storage": "1",
        "varName": "wee",
        "name": "Create Embed Message"
      },
      {
        "storage": "1",
        "varName": "wee",
        "fieldName": "ESO Maintenance Notice",
        "message": "${tempVars(\"ttc2\")[0] || \"\"}\n\n${tempVars(\"ttc2\")[1] || \"\"}\n\n${tempVars(\"ttc2\")[2] || \"\"}\n\n${tempVars(\"ttc2\")[3] || \"\"}\n\n${tempVars(\"ttc2\")[4] || \"\"}\n\n${tempVars(\"ttc2\")[5] || \"\"}\n\n\n",
        "inline": "1",
        "name": "Add Embed Field"
      },
      {
        "storage": "1",
        "varName": "wee",
        "message": "via forums.elderscrollsonline.com |  ESO Assistant",
        "footerIcon": "https://i.imgur.com/kqeNNPQ.png",
        "name": "Set Embed Footer"
      },
      {
        "behavior": "0",
        "interpretation": "0",
        "code": "// this RunScript goes at the end of every cron\n\nconst VarToSend = tempVars(\"wee\");\n\nBot.Subscriber.find({ subbed: true }, function(err, subscribers) {\n    if (err) log(err.stack ? err.stack : err)\n\n    if (subscribers.length > -1) {\n        for (var index = 0; index < subscribers.length; index++) {                        \n            (function(index) {\n                setTimeout(function() {\n                    let subscriber = subscribers[index];\n\n                    let channelid = subscriber.channelid;\n                    let serverid = subscriber.serverid;\n                    let channel = client.channels.get(channelid);\n\n                    if(channel){                          \n                        channel.send(VarToSend).catch(err => console.log(\"Invalid message to send to subscribers!\"))\n                    }else{\n         \n                    }\n                }, 1000 * index);\n             })(index);\n        }                           \n    }         \n});",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      }
    ],
    "_aliases": [
      "notes",
      "notice"
    ],
    "event-type": "0"
  },
  {
    "name": "cron_patch",
    "permissions": "NONE",
    "restriction": "0",
    "_id": "*/10 * * * *",
    "_timeRestriction": 2,
    "actions": [
      {
        "url": "https://forums.elderscrollsonline.com/en/categories/patch-notes",
        "storage": "1",
        "varName": "mypage",
        "name": "Store HTML From Webpage"
      },
      {
        "debugMode": "1",
        "xpath": "//*[@class='Title']//@href | //*[@class='Title']//text()[normalize-space()]",
        "source": "1",
        "sourceVarName": "mypage",
        "storage": "1",
        "varName": "ttc",
        "name": "Parse From Stored Webpage"
      },
      {
        "behavior": "1",
        "interpretation": "0",
        "code": "let status = (tempVars(\"ttc\")[0]+tempVars(\"ttc\")[1]);\n\nBot.Saved.get(\"server_patch\", function(err, reply) {\n    if(status !== reply){\n      Actions.callNextAction(cache);\n      Bot.Saved.set(\"server_patch\", status);\n    }\n});\n\n\n\n",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      },
      {
        "title": "ESO Forums",
        "author": "ESO Assistant",
        "color": "#2256bf",
        "timestamp": "false",
        "url": "https://forums.elderscrollsonline.com/en/categories/patch-notes",
        "authorIcon": "https://i.imgur.com/zQadp8w.png",
        "imageUrl": "",
        "thumbUrl": "",
        "storage": "1",
        "varName": "wee",
        "name": "Create Embed Message"
      },
      {
        "storage": "1",
        "varName": "wee",
        "fieldName": "Latest Patch Notes",
        "message": "[${tempVars(\"ttc\")[1].replace(\"&amp;\",\"&\")}](${tempVars(\"ttc\")[0]})\n",
        "inline": "1",
        "name": "Add Embed Field"
      },
      {
        "storage": "1",
        "varName": "wee",
        "message": "Patch Notes for The Elder Scrolls Online",
        "footerIcon": "https://i.imgur.com/vYUhvbf.png",
        "name": "Set Embed Footer"
      },
      {
        "behavior": "0",
        "interpretation": "0",
        "code": "// this RunScript goes at the end of every cron\n\nconst VarToSend = tempVars(\"wee\");\n\nBot.Subscriber.find({ subbed: true }, function(err, subscribers) {\n    if (err) log(err.stack ? err.stack : err)\n\n    if (subscribers.length > -1) {\n        for (var index = 0; index < subscribers.length; index++) {                        \n            (function(index) {\n                setTimeout(function() {\n                    let subscriber = subscribers[index];\n\n                    let channelid = subscriber.channelid;\n                    let serverid = subscriber.serverid;\n                    let channel = client.channels.get(channelid);\n\n                    if(channel){                          \n                        channel.send(VarToSend).catch(err => console.log(\"Invalid message to send to subscribers!\"))\n                    }else{\n         \n                    }\n                }, 1000 * index);\n             })(index);\n        }                           \n    }         \n});",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      }
    ],
    "_aliases": [
      "notes",
      "notice"
    ],
    "event-type": "0"
  },
  {
    "name": "cron_warn",
    "permissions": "NONE",
    "restriction": "0",
    "_id": "*/10 * * * *",
    "_timeRestriction": 2,
    "actions": [
      {
        "url": "https://forums.elderscrollsonline.com/en/",
        "storage": "1",
        "varName": "mypage2",
        "name": "Store HTML From Webpage"
      },
      {
        "debugMode": "0",
        "xpath": "//*[@class='DismissMessage WarningMessage']//text()[normalize-space()]",
        "source": "1",
        "sourceVarName": "mypage2",
        "storage": "1",
        "varName": "note",
        "name": "Parse From Stored Webpage"
      },
      {
        "behavior": "1",
        "interpretation": "0",
        "code": "let status = (tempVars(\"note\")[0]+tempVars(\"note\")[1]+tempVars(\"note\")[2]);\n\n\nBot.Saved.get(\"server_warn\", function(err, reply) {\n    if(status !== reply){\n      Actions.callNextAction(cache);\n      Bot.Saved.set(\"server_warn\", status);\n    }\n});\n\n\n\n",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      },
      {
        "title": "forums.elderscrollsonline.com",
        "author": "ESO Assistant",
        "color": "#2256bf",
        "timestamp": "false",
        "url": "https://forums.elderscrollsonline.com",
        "authorIcon": "https://i.imgur.com/zQadp8w.png",
        "imageUrl": "",
        "thumbUrl": "",
        "storage": "1",
        "varName": "wee",
        "name": "Create Embed Message"
      },
      {
        "storage": "1",
        "varName": "wee",
        "fieldName": "ESO Notice",
        "message": "${tempVars(\"note\")[0] || \"\"}\n\n${tempVars(\"note\")[1] || \"\"}\n\n${tempVars(\"note\")[2] || \"\"}\n\n\n",
        "inline": "1",
        "name": "Add Embed Field"
      },
      {
        "storage": "1",
        "varName": "wee",
        "message": "via forums.elderscrollsonline.com |  ESO Assistant",
        "footerIcon": "https://i.imgur.com/3bGaoaJ.png",
        "name": "Set Embed Footer"
      },
      {
        "behavior": "0",
        "interpretation": "0",
        "code": "// this RunScript goes at the end of every cron\n\nconst VarToSend = tempVars(\"wee\");\n\nBot.Subscriber.find({ subbed: true }, function(err, subscribers) {\n    if (err) log(err.stack ? err.stack : err)\n\n    if (subscribers.length > -1) {\n        for (var index = 0; index < subscribers.length; index++) {                        \n            (function(index) {\n                setTimeout(function() {\n                    let subscriber = subscribers[index];\n\n                    let channelid = subscriber.channelid;\n                    let serverid = subscriber.serverid;\n                    let channel = client.channels.get(channelid);\n\n                    if(channel){                          \n                        channel.send(VarToSend).catch(err => console.log(\"Invalid message to send to subscribers!\"))\n                    }else{\n         \n                    }\n                }, 1000 * index);\n             })(index);\n        }                           \n    }         \n});",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      }
    ],
    "_aliases": [
      "notes",
      "notice"
    ],
    "event-type": "0"
  },
  {
    "name": "note_disabled",
    "permissions": "NONE",
    "restriction": "0",
    "_id": "*/2 * * * *",
    "_timeRestriction": 2,
    "actions": [
      {
        "url": "https://forums.elderscrollsonline.com/en/",
        "storage": "1",
        "varName": "mypage2",
        "name": "Store HTML From Webpage"
      },
      {
        "debugMode": "0",
        "xpath": "//*[@class='DismissMessage AlertMessage']/text()[normalize-space()]",
        "source": "1",
        "sourceVarName": "mypage2",
        "storage": "1",
        "varName": "ttc2",
        "name": "Parse From Stored Webpage"
      },
      {
        "debugMode": "0",
        "xpath": "//*[@class='DismissMessage WarningMessage']//text()[normalize-space()]",
        "source": "1",
        "sourceVarName": "mypage2",
        "storage": "1",
        "varName": "note",
        "name": "Parse From Stored Webpage"
      },
      {
        "behavior": "1",
        "interpretation": "0",
        "code": "\nlet statusArray = [\n(\"note_\"+tempVars(\"ttc2\")[0]),\n(\"note_\"+tempVars(\"ttc2\")[1]),\n(\"note_\"+tempVars(\"ttc2\")[2]),\n(\"note_\"+tempVars(\"ttc2\")[3]),\n(\"note_\"+tempVars(\"ttc2\")[4]),\n(\"note_\"+tempVars(\"ttc2\")[5]),\n(\"warn_\"+tempVars(\"note\")[0]),\n(\"warn_\"+tempVars(\"note\")[1]),\n(\"warn_\"+tempVars(\"note\")[2])\n];\n\nBot.Saved.get(\"server_warnnote\", function(err, replies) {\n    let reply = replies.split(\"|\");\n\n    if(replies.length != statusArray.join(\"|\").length){\n        let newStatusArray = [];\n\n        for(var index in statusArray){\n            let item = statusArray[index];\n            if(statusArray[index] != reply[index]){\n                newStatusArray.push();\n            }else{\n                newStatusArray.push(false);\n            }\n        }\n        Actions.storeValue(newStatusArray, 1, \"ttc\", cache);     \n        Actions.callNextAction(cache);\n        Bot.Saved.set(\"server_warnnote\", statusArray.join(\"|\"));\n    }\n});\n",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      },
      {
        "title": "forums.elderscrollsonline.com",
        "author": "ESO Assistant",
        "color": "#2256bf",
        "timestamp": "false",
        "url": "https://forums.elderscrollsonline.com",
        "authorIcon": "https://i.imgur.com/zQadp8w.png",
        "imageUrl": "",
        "thumbUrl": "https://i.imgur.com/vYUhvbf.png",
        "storage": "1",
        "varName": "wee",
        "name": "Create Embed Message"
      },
      {
        "storage": "1",
        "varName": "wee",
        "fieldName": "ESO Notice",
        "message": "${tempVars(\"ttc2\")[0] || \"\"}\n\n${tempVars(\"ttc2\")[1] || \"\"}\n\n${tempVars(\"ttc2\")[2] || \"\"}\n\n${tempVars(\"ttc2\")[3] || \"\"}\n\n${tempVars(\"ttc2\")[4] || \"\"}\n\n${tempVars(\"ttc2\")[5] || \"\"}\n\n${tempVars(\"note\")[0] || \"\"}\n\n${tempVars(\"note\")[1] || \"\"}\n\n${tempVars(\"note\")[2] || \"\"}\n  ",
        "inline": "1",
        "name": "Add Embed Field"
      },
      {
        "storage": "1",
        "varName": "wee",
        "message": "via forums.elderscrollsonline.com |  ESO Assistant",
        "footerIcon": "https://i.imgur.com/kqeNNPQ.png",
        "name": "Set Embed Footer"
      },
      {
        "behavior": "0",
        "interpretation": "0",
        "code": "// this RunScript goes at the end of every cron\n\nconst VarToSend = tempVars(\"wee\");\n\nBot.Subscriber.find({ subbed: true }, function(err, subscribers) {\n    if (err) log(err.stack ? err.stack : err)\n\n    if (subscribers.length > -1) {\n        for (var index = 0; index < subscribers.length; index++) {                        \n            (function(index) {\n                setTimeout(function() {\n                    let subscriber = subscribers[index];\n\n                    let channelid = subscriber.channelid;\n                    let serverid = subscriber.serverid;\n                    let channel = client.channels.get(channelid);\n\n                    if(channel){                          \n                        channel.send(VarToSend).catch(err => console.log(\"Invalid message to send to subscribers!\"))\n                    }else{\n         \n                    }\n                }, 1000 * index);\n             })(index);\n        }                           \n    }         \n});",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      }
    ],
    "_aliases": [
      "notes",
      "notice"
    ],
    "event-type": "0"
  },
  {
    "name": "cron_luxury",
    "permissions": "NONE",
    "restriction": "0",
    "_id": "06 17 * * FRI",
    "actions": [
      {
        "url": "http://benevolentbowd.ca/games/esotu/esotu-chronicle-of-luxury-furnisher-vendor-items/",
        "storage": "1",
        "varName": "mypage",
        "name": "Store HTML From Webpage"
      },
      {
        "debugMode": "1",
        "xpath": "//div[@class='entry-content']//ul[2]/li/text() |  //div[@class='entry-content']//h2[2]/text() | //div[@class='entry-content']//h3[1]/text()",
        "source": "1",
        "sourceVarName": "mypage",
        "storage": "1",
        "varName": "set",
        "name": "Parse From Stored Webpage"
      },
      {
        "title": "Luxury Vender",
        "author": "ESO Assistant",
        "color": "#2256bf",
        "timestamp": "false",
        "url": "http://benevolentbowd.ca",
        "authorIcon": "https://i.imgur.com/zQadp8w.png",
        "imageUrl": "https://i.imgur.com/2AiMiic.jpg",
        "thumbUrl": "https://i.imgur.com/PhV9o8S.png",
        "storage": "1",
        "varName": "setlist",
        "name": "Create Embed Message"
      },
      {
        "storage": "1",
        "varName": "setlist",
        "fieldName": "Items for the weekend of ${tempVars(\"set\")[1]}",
        "message": "**Location** :  Cicero’s Food & General Goods shop\n[Hollow City - Coldharbour](https://i.imgur.com/3a5QyG5.png)\n\n${tempVars(\"set\")[2] || \"\"}\n${tempVars(\"set\")[3] || \"\"}\n${tempVars(\"set\")[4] || \"\"}\n${tempVars(\"set\")[5] || \"\"}\n${tempVars(\"set\")[6] || \"\"}\n${tempVars(\"set\")[7] || \"\"}\n${tempVars(\"set\")[8] || \"\"}\n",
        "inline": "1",
        "name": "Add Embed Field"
      },
      {
        "storage": "1",
        "varName": "setlist",
        "message": "via benevolentbowd.ca |  ESO Assistant",
        "footerIcon": "https://i.imgur.com/oYVP6Qj.png",
        "name": "Set Embed Footer"
      },
      {
        "behavior": "0",
        "interpretation": "0",
        "code": "// this RunScript goes at the end of every cron\n\nconst VarToSend = tempVars(\"setlist\");\n\nBot.Subscriber.find({ subbed: true }, function(err, subscribers) {\n    if (err) log(err.stack ? err.stack : err)\n\n    if (subscribers.length > -1) {\n        for (var index = 0; index < subscribers.length; index++) {                        \n            (function(index) {\n                setTimeout(function() {\n                    let subscriber = subscribers[index];\n\n                    let channelid = subscriber.channelid;\n                    let serverid = subscriber.serverid;\n                    let channel = client.channels.get(channelid);\n\n                    if(channel){                          \n                        channel.send(VarToSend).catch(err => console.log(\"Invalid message to send to subscribers!\"))\n                    }else{\n         \n                    }\n                }, 1000 * index);\n             })(index);\n        }                           \n    }         \n});",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      }
    ],
    "_aliases": [
      "lv",
      "furniture"
    ],
    "event-type": "0"
  },
  {
    "name": "old_pledge",
    "temp": "",
    "event-type": "0",
    "_id": "old_pledge",
    "actions": [
      {
        "url": "https://esoleaderboards.com/",
        "storage": "1",
        "varName": "mypage",
        "name": "Store HTML From Webpage"
      },
      {
        "debugMode": "0",
        "xpath": "//*[@id='page-warp']/div[@id='content']/div[@class='scoreBox'][1]/div[@class='scoreBox_container']/table[@id='score_table']/tbody//text()[normalize-space(.)]",
        "source": "1",
        "sourceVarName": "mypage",
        "storage": "1",
        "varName": "set",
        "name": "Parse From Stored Webpage"
      },
      {
        "title": "Pledge Info",
        "author": "ESO Assistant",
        "color": "#2256bf",
        "timestamp": "false",
        "url": "https://esoleaderboards.com/",
        "authorIcon": "https://i.imgur.com/zQadp8w.png",
        "imageUrl": "https://i.imgur.com/K87zjW7.png",
        "thumbUrl": "https://i.imgur.com/PhV9o8S.png",
        "storage": "1",
        "varName": "setlist",
        "name": "Create Embed Message"
      },
      {
        "storage": "1",
        "varName": "setlist",
        "fieldName": "Todays Pledges are",
        "message": "*Maj's*: ${tempVars(\"set\")[12] || \"\"}\n*Glirion's*: ${tempVars(\"set\")[13] || \"\"}\n*Urgarlag's*: ${tempVars(\"set\")[14] || \"\"}\n\n",
        "inline": "1",
        "name": "Add Embed Field"
      },
      {
        "storage": "1",
        "varName": "setlist",
        "fieldName": "${tempVars(\"set\")[19]}",
        "message": "${tempVars(\"set\")[16]|| \"\"} | ${tempVars(\"set\")[17]|| \"\"} | ${tempVars(\"set\")[18] || \"\"}\n",
        "inline": "1",
        "name": "Add Embed Field"
      },
      {
        "storage": "1",
        "varName": "setlist",
        "fieldName": "Yesterdays Pledges",
        "message": "~~*${tempVars(\"set\")[8] || \"\"} | ${tempVars(\"set\")[9] || \"\"} | ${tempVars(\"set\")[10] || \"\"}*~~\n",
        "inline": "1",
        "name": "Add Embed Field"
      },
      {
        "storage": "1",
        "varName": "setlist",
        "message": "via esoleaderboards.com | Pledge Info!",
        "footerIcon": "https://i.imgur.com/oYVP6Qj.png",
        "name": "Set Embed Footer"
      },
      {
        "behavior": "0",
        "interpretation": "0",
        "code": "// this RunScript goes at the end of every cron\n\nconst VarToSend = tempVars(\"setlist\");\n\nBot.Subscriber.find({ subbed: true }, function(err, subscribers) {\n    if (err) log(err.stack ? err.stack : err)\n\n    if (subscribers.length > -1) {\n        for (var index = 0; index < subscribers.length; index++) {                        \n            (function(index) {\n                setTimeout(function() {\n                    let subscriber = subscribers[index];\n\n                    let channelid = subscriber.channelid;\n                    let serverid = subscriber.serverid;\n                    let channel = client.channels.get(channelid);\n\n                    if(channel){                          \n                        channel.send(VarToSend).catch(err => console.log(\"Invalid message to send to subscribers!\"))\n                    }else{\n         \n                    }\n                }, 1000 * index);\n             })(index);\n        }                           \n    }         \n});",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      }
    ]
  },
  {
    "name": "cron_pledge",
    "temp": "",
    "event-type": "0",
    "_id": "01 23 * * *",
    "actions": [
      {
        "token": "",
        "user": "",
        "pass": "",
        "url": "https://esoleaderboards.com/api/pledge?type=1\n",
        "path": "",
        "storage": "1",
        "varName": "1",
        "debugMode": "1",
        "headers": "",
        "name": "Store Json From WebAPI"
      },
      {
        "token": "",
        "user": "",
        "pass": "",
        "url": "https://esoleaderboards.com/api/pledge?type=2",
        "path": "",
        "storage": "1",
        "varName": "2",
        "debugMode": "1",
        "headers": "",
        "name": "Store Json From WebAPI"
      },
      {
        "token": "",
        "user": "",
        "pass": "",
        "url": "https://esoleaderboards.com/api/pledge?type=3",
        "path": "",
        "storage": "1",
        "varName": "3",
        "debugMode": "1",
        "headers": "",
        "name": "Store Json From WebAPI"
      },
      {
        "title": "",
        "author": "",
        "color": "#2256bf",
        "timestamp": "false",
        "url": "",
        "authorIcon": "",
        "imageUrl": "",
        "thumbUrl": "",
        "storage": "1",
        "varName": "setlist",
        "name": "Create Embed Message"
      },
      {
        "storage": "1",
        "varName": "setlist",
        "fieldName": "Todays Pledges",
        "message": "***Maj's*** : [${tempVars(\"1\")}](http://en.uesp.net/wiki/Online:${tempVars(\"1\").split(' ').join('_')})\n***Glirion's*** : [${tempVars(\"2\")}](http://en.uesp.net/wiki/Online:${tempVars(\"2\").split(' ').join('_')})\n***Urgarlag's*** : [${tempVars(\"3\")}](http://en.uesp.net/wiki/Online:${tempVars(\"3\").split(' ').join('_')})\n",
        "inline": "1",
        "name": "Add Embed Field"
      },
      {
        "storage": "1",
        "varName": "setlist",
        "message": "via esoleaderboards.com",
        "footerIcon": "https://i.imgur.com/WqySjdW.png",
        "name": "Set Embed Footer"
      },
      {
        "behavior": "0",
        "interpretation": "0",
        "code": "// this RunScript goes at the end of every cron\n\nconst VarToSend = tempVars(\"setlist\");\n\nBot.Subscriber.find({ subbed: true }, function(err, subscribers) {\n    if (err) log(err.stack ? err.stack : err)\n\n    if (subscribers.length > -1) {\n        for (var index = 0; index < subscribers.length; index++) {                        \n            (function(index) {\n                setTimeout(function() {\n                    let subscriber = subscribers[index];\n\n                    let channelid = subscriber.channelid;\n                    let serverid = subscriber.serverid;\n                    let channel = client.channels.get(channelid);\n\n                    if(channel){                          \n                        channel.send(VarToSend).catch(err => console.log(\"Invalid message to send to subscribers!\"))\n                    }else{\n         \n                    }\n                }, 1000 * index);\n             })(index);\n        }                           \n    }         \n});",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      }
    ],
    "_aliases": [
      "pledges",
      "undaunted",
      "daily",
      "dailys"
    ]
  },
  {
    "name": "-----------RESPONSE---------",
    "temp": "",
    "event-type": "0",
    "_id": "UyGmr",
    "actions": []
  },
  {
    "name": "Welcome",
    "temp": "member",
    "event-type": "6",
    "_id": "welco",
    "actions": [
      {
        "info": "1",
        "find": "welcome",
        "storage": "1",
        "varName": "well",
        "name": "Find Channel"
      },
      {
        "info": "1",
        "find": "Guest",
        "storage": "1",
        "varName": "guest",
        "name": "Find Role"
      },
      {
        "storage": "1",
        "varName": "guest",
        "comparison": "0",
        "value": "",
        "iftrue": "0",
        "iftrueVal": "",
        "iffalse": "3",
        "iffalseVal": "1",
        "name": "Check Variable"
      },
      {
        "member": "2",
        "varName2": "member",
        "role": "3",
        "varName": "guest",
        "name": "Add Member Role"
      },
      {
        "server": "0",
        "varName": "",
        "info": "2",
        "storage": "1",
        "varName2": "server",
        "name": "Store Server Info"
      },
      {
        "storage": "1",
        "varName": "well",
        "comparison": "0",
        "value": "",
        "iftrue": "0",
        "iftrueVal": "",
        "iffalse": "1",
        "iffalseVal": "8",
        "name": "Check Variable"
      },
      {
        "channel": "5",
        "varName": "well",
        "message": "Welcome ${tempVars(\"member\")} to ${tempVars(\"server\")}!",
        "storage": "0",
        "varName2": "",
        "name": "Send Message"
      }
    ]
  },
  {
    "name": "Eso Assistant",
    "temp": "msg",
    "event-type": "2",
    "actions": [
      {
        "message": "1",
        "varName": "msg",
        "info": "2",
        "storage": "1",
        "varName2": "text",
        "name": "Store Message Info"
      },
      {
        "storage": "1",
        "varName": "text",
        "comparison": "6",
        "value": "(bot help|bothelp|bot info|botinfo|ESO Assistant|ESOAssistant|I want that bot|How do I get that bot|Where can I get that bot)",
        "iftrue": "0",
        "iftrueVal": "",
        "iffalse": "1",
        "iffalseVal": "",
        "name": "Check Variable"
      },
      {
        "message": "1",
        "varName": "msg",
        "info": "4",
        "storage": "1",
        "varName2": "channel",
        "name": "Store Message Info"
      },
      {
        "info": "4",
        "storage": "1",
        "varName2": "usercount",
        "name": "Store Bot Client Info"
      },
      {
        "info": "3",
        "storage": "1",
        "varName2": "guildcount",
        "name": "Store Bot Client Info"
      },
      {
        "info": "17",
        "storage": "1",
        "varName2": "guildnames",
        "name": "Store Bot Client Info"
      },
      {
        "info": "21",
        "storage": "1",
        "varName2": "Discord JS version",
        "name": "Store Bot Client Info"
      },
      {
        "info": "10",
        "storage": "1",
        "varName2": "chan",
        "name": "Store Bot Client Info"
      },
      {
        "info": "33",
        "storage": "1",
        "varName2": "eve",
        "name": "Store Bot Client Info"
      },
      {
        "info": "32",
        "storage": "1",
        "varName2": "com",
        "name": "Store Bot Client Info"
      },
      {
        "info": "5",
        "storage": "1",
        "varName2": "Ping",
        "name": "Store Bot Client Info"
      },
      {
        "info": "31",
        "storage": "1",
        "varName2": "botid",
        "name": "Store Bot Client Info"
      },
      {
        "info": "28",
        "storage": "1",
        "varName2": "os",
        "name": "Store Bot Client Info"
      },
      {
        "info": "9",
        "storage": "1",
        "varName2": "voice channels",
        "name": "Store Bot Client Info"
      },
      {
        "info": "11",
        "storage": "1",
        "varName2": "emoj",
        "name": "Store Bot Client Info"
      },
      {
        "info": "27",
        "storage": "1",
        "varName2": "Ram",
        "name": "Store Bot Client Info"
      },
      {
        "behavior": "0",
        "interpretation": "0",
        "code": "let temp = process.uptime();\n    var days = Math.floor((temp %= 31536000) / 86400);\n    var hours = Math.floor((temp %= 86400) / 3600);\n    var minutes = Math.floor((temp %= 3600) / 60);\n    var seconds = Math.round(temp % 60)\nvar sendMsg = \" \" + days + \" days \" + hours + \" hours \" + minutes + \" minutes \" + seconds + \" seconds.\"\nthis.storeValue(sendMsg, 1, \"sendMessage\", cache);",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      },
      {
        "comment": "\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/",
        "color": "#000000",
        "name": "Comment"
      },
      {
        "server": "1",
        "varName": "server",
        "name": "Change Server"
      },
      {
        "storage": "1",
        "varName": "Status Message",
        "message": "\n__***LIVE BOT STATUS: ONLINE - ALL SERVICES ARE RUNNING***__ \n\n__***Bot Prefix:***__  `${tempVars(\"prefix\")}`\n\n__***Server Count:***__  `${tempVars(\"guildcount\")}`\n\n\n__***Members:***__  `${tempVars(\"usercount\")}`\n\n\n__***Voice Connections:***__  `${tempVars(\"voice channels\")}`\n\n\n__***Bot Uptime Since Last Restart:***__  -  `${tempVars(\"sendMessage\")}`\n\n\n__***Ping***__  -  `${tempVars(\"Ping\")}`\n\n\n__***Ram Usage MB***__  -  `${tempVars(\"Ram\")}`\n\n\n__***Discord JS Version***__  -  `${tempVars(\"Discord JS version\")}`\n\n\n__***Server Names:***__ \n\n`${tempVars(\"guildnames\")}`",
        "name": "Edit Message"
      },
      {
        "title": "Add me to your Server",
        "author": "ESO Assistant",
        "color": "#5A58F8",
        "timestamp": "false",
        "url": "https://discordapp.com/api/oauth2/authorize?client_id=411786681935724546&permissions=8&scope=bot",
        "authorIcon": "https://i.imgur.com/zQadp8w.png",
        "imageUrl": "",
        "thumbUrl": "https://i.imgur.com/iBe0nxl.png",
        "storage": "1",
        "varName": "embedded",
        "name": "Create Embed Message"
      },
      {
        "storage": "1",
        "varName": "embedded",
        "fieldName": "ESO Assistant Status",
        "message": "**Bot Prefix** - ` ${server.tag ||  process.env.BOT_TAG || Files.data.settings.tag} `\n**Help Menu** - `help`\n\n**Server Count:** - `${tempVars(\"guildcount\")}`\n**Members:** - `${tempVars(\"usercount\")}`\n**Emoji Count:** - `${tempVars(\"emoj\")}`\n**Total Commands:** - `${tempVars(\"com\")}`\n**Total Events:** - `${tempVars(\"eve\")}`\n**Voice Connections:** - `${tempVars(\"voice channels\")}`\n**Ping**  -  `${tempVars(\"Ping\")}`\n**Ram Usage MB**  -  `${tempVars(\"Ram\")}`\n**Bot Operating System** - `${tempVars(\"os\")}`\n**Discord JS Version**  -  `${tempVars(\"Discord JS version\")}`\n**Node JS Version:** - `${tempVars(\"botid\")}`\n**Bot Creator:** - `@Ahlfs`\n**Bot Developer:** - `@General Wrex`\n\n**Support Server**\nhttps://discord.gg/TcEKF8z\nhttp://esoassistant.com\n\n**Bot Uptime Since Last Restart:**\n",
        "inline": "1",
        "name": "Add Embed Field"
      },
      {
        "storage": "1",
        "varName": "embedded",
        "message": "${tempVars(\"sendMessage\")}",
        "footerIcon": "https://i.imgur.com/gPd5lDy.png",
        "name": "Set Embed Footer"
      },
      {
        "storage": "1",
        "varName": "embedded",
        "channel": "5",
        "varName2": "channel",
        "name": "Send Embed Message"
      }
    ],
    "_id": "EvEn1"
  },
  {
    "name": "----------BOT-STATUS-------------",
    "temp": "",
    "event-type": "0",
    "_id": "Bfxab",
    "actions": []
  },
  {
    "name": "dicordbotsjoin",
    "temp": "30",
    "event-type": "4",
    "_id": "EvEn2",
    "actions": [
      {
        "behavior": "0",
        "interpretation": "0",
        "code": "const superagent = require('superagent')\nconst botClient = this.getDBM().Bot.bot;\n\nsuperagent.post(`https://discordbots.org/api/bots/${client.user.id}/stats`)\n  .set('Authorization', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjQxMTc4NjY4MTkzNTcyNDU0NiIsImJvdCI6dHJ1ZSwiaWF0IjoxNTIzMTYxOTM3fQ.295C8TbAR7suWIqvQ3f2evhSzrfCo2PQjPzfQvXDE9s')\n  .send({ server_count: client.guilds && client.guilds.size ? botClient.guilds.size : (botClient.Guilds ? botClient.Guilds.size : Object.keys(botClient.Servers).length) })\n  .then(() => console.log('Updated discordbots.org stats!'))",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      }
    ]
  },
  {
    "name": "-------------ADMIN----------------",
    "temp": "",
    "event-type": "0",
    "_id": "EpOMy",
    "actions": []
  },
  {
    "name": "Message edited",
    "temp": "oldmsg",
    "event-type": "26",
    "_id": "EvEn4",
    "actions": [
      {
        "storage": "1",
        "varName": "oldmsg",
        "comparison": "1",
        "value": "tempVars(\"newmsg\")",
        "iftrue": "1",
        "iftrueVal": "",
        "iffalse": "0",
        "iffalseVal": "",
        "name": "Check Variable"
      },
      {
        "message": "1",
        "varName": "oldmsg",
        "info": "2",
        "storage": "1",
        "varName2": "oldmsgtxt",
        "name": "Store Message Info"
      },
      {
        "message": "1",
        "varName": "newmsg",
        "info": "2",
        "storage": "1",
        "varName2": "newmsgtxt",
        "name": "Store Message Info"
      },
      {
        "message": "1",
        "varName": "newmsg",
        "info": "3",
        "storage": "1",
        "varName2": "newmsgauth",
        "name": "Store Message Info"
      },
      {
        "message": "1",
        "varName": "newmsg",
        "info": "4",
        "storage": "1",
        "varName2": "newmsgch",
        "name": "Store Message Info"
      },
      {
        "channel": "3",
        "varName": "newmsgch",
        "info": "2",
        "storage": "1",
        "varName2": "channel",
        "name": "Store Channel Info"
      },
      {
        "member": "2",
        "varName": "newmsgauth",
        "info": "3",
        "storage": "1",
        "varName2": "memdisp",
        "name": "Store Member Info"
      },
      {
        "member": "2",
        "varName": "newmsgauth",
        "info": "16",
        "storage": "1",
        "varName2": "memavatar",
        "name": "Store Member Info"
      },
      {
        "member": "2",
        "varName": "newmsgauth",
        "info": "7",
        "storage": "1",
        "varName2": "tag",
        "name": "Store Member Things"
      },
      {
        "member": "2",
        "varName": "newmsgauth",
        "info": "4",
        "storage": "1",
        "varName2": "isbot",
        "name": "Store Member Things"
      },
      {
        "storage": "2",
        "varName": "undefined",
        "name": "Save Variable"
      },
      {
        "storage": "1",
        "varName": "isbot",
        "comparison": "1",
        "value": "true",
        "iftrue": "1",
        "iftrueVal": "",
        "iffalse": "0",
        "iffalseVal": "",
        "name": "Check Variable"
      },
      {
        "storage": "1",
        "varName": "oldmsg",
        "comparison": "2",
        "value": "tempVars(\"newmsg\")",
        "iftrue": "1",
        "iftrueVal": "",
        "iffalse": "0",
        "iffalseVal": "",
        "name": "Check Variable"
      },
      {
        "info": "1",
        "find": "bot-log",
        "storage": "1",
        "varName": "log-channel",
        "name": "Find Channel"
      },
      {
        "title": "BOT LOG",
        "author": "ESO Assistant",
        "color": "#2256bf",
        "timestamp": "true",
        "url": "",
        "authorIcon": "https://i.imgur.com/zQadp8w.png",
        "imageUrl": "",
        "thumbUrl": "${tempVars(\"memavatar\")}",
        "storage": "1",
        "varName": "embed",
        "name": "Create Embed Message"
      },
      {
        "storage": "1",
        "varName": "embed",
        "fieldName": "${tempVars(\"oldmsgtxt\") == tempVars(\"newmsgtxt\") ? \"\" : \"Edited Message\"}",
        "message": "Old Message:\n```${tempVars(\"oldmsgtxt\")}```\nNew Message: \n```${tempVars(\"newmsgtxt\")}```",
        "inline": "1",
        "name": "Add Embed Field"
      },
      {
        "storage": "1",
        "varName": "embed",
        "message": "${tempVars(\"tag\")} Edited a message in: ${tempVars(\"channel\")}",
        "footerIcon": "https://i.imgur.com/d3xbKQL.png",
        "name": "Set Embed Footer"
      },
      {
        "storage": "1",
        "varName": "undefined",
        "comparison": "2",
        "value": "undefined",
        "iftrue": "1",
        "iftrueVal": "",
        "iffalse": "0",
        "iffalseVal": "",
        "name": "Check Variable"
      },
      {
        "storage": "1",
        "varName": "embed",
        "channel": "5",
        "varName2": "log-channel",
        "name": "Send Embed Message"
      }
    ],
    "temp2": "newmsg"
  },
  {
    "name": "HiWithEmbed",
    "temp": "member",
    "event-type": "6",
    "actions": [
      {
        "member": "2",
        "varName": "member",
        "info": "16",
        "storage": "1",
        "varName2": "avatar",
        "name": "Store Member Info"
      },
      {
        "server": "0",
        "varName": "",
        "info": "17",
        "storage": "1",
        "varName2": "memnum",
        "name": "Store Server Info"
      },
      {
        "server": "0",
        "varName": "",
        "info": "2",
        "storage": "1",
        "varName2": "sname",
        "name": "Store Server Info"
      },
      {
        "member": "2",
        "varName": "member",
        "info": "2",
        "storage": "1",
        "varName2": "name",
        "name": "Store Member Info"
      },
      {
        "member": "2",
        "varName": "member",
        "info": "0",
        "storage": "1",
        "varName2": "object",
        "name": "Store Member Info"
      },
      {
        "member": "2",
        "varName": "member",
        "info": "6",
        "storage": "1",
        "varName2": "disc",
        "name": "Store Member Things"
      },
      {
        "info": "1",
        "find": "bot-log",
        "storage": "1",
        "varName": "channel",
        "name": "Find Channel"
      },
      {
        "title": "BOT LOG",
        "author": "ESO Assistant",
        "color": "#2256bf",
        "timestamp": "true",
        "url": "",
        "authorIcon": "https://i.imgur.com/zQadp8w.png",
        "imageUrl": "",
        "thumbUrl": "${tempVars(\"avatar\")}",
        "storage": "1",
        "varName": "embed",
        "name": "Create Embed Message"
      },
      {
        "storage": "1",
        "varName": "embed",
        "message": "New User Joined Server: \n${tempVars(\"member\")}!\n\nServer:\n${tempVars(\"sname\")}\n\nServer Member Count:\n${tempVars(\"memnum\")}\n\nHas had Discord Since:\n${tempVars(\"disc\")}",
        "name": "Set Embed Description"
      },
      {
        "storage": "1",
        "varName": "embed",
        "message": "",
        "footerIcon": "https://i.imgur.com/d3xbKQL.png",
        "name": "Set Embed Footer"
      },
      {
        "storage": "1",
        "varName": "embed",
        "channel": "5",
        "varName2": "channel",
        "name": "Send Embed Message"
      }
    ],
    "_id": "EvEn6"
  },
  {
    "name": "ByeWithEmbed",
    "temp": "member",
    "event-type": "7",
    "actions": [
      {
        "member": "2",
        "varName": "member",
        "info": "16",
        "storage": "1",
        "varName2": "avatar",
        "name": "Store Member Info"
      },
      {
        "member": "2",
        "varName": "member",
        "info": "2",
        "storage": "1",
        "varName2": "name",
        "name": "Store Member Info"
      },
      {
        "member": "2",
        "varName": "member",
        "info": "0",
        "storage": "1",
        "varName2": "object",
        "name": "Store Member Info"
      },
      {
        "member": "2",
        "varName": "member",
        "info": "7",
        "storage": "1",
        "varName2": "role",
        "name": "Store Member Info"
      },
      {
        "member": "2",
        "varName": "member",
        "info": "0",
        "storage": "1",
        "varName2": "disc",
        "name": "Store Member Things"
      },
      {
        "member": "2",
        "varName": "member",
        "info": "2",
        "storage": "1",
        "varName2": "ms",
        "name": "Store Member Things"
      },
      {
        "info": "1",
        "find": "bot-log",
        "storage": "1",
        "varName": "channel",
        "name": "Find Channel"
      },
      {
        "title": "BOT LOG",
        "author": "ESO Assistant",
        "color": "#2256bf",
        "timestamp": "true",
        "url": "",
        "authorIcon": "https://i.imgur.com/zQadp8w.png",
        "imageUrl": "",
        "thumbUrl": "${tempVars(\"avatar\")}",
        "storage": "1",
        "varName": "embed",
        "name": "Create Embed Message"
      },
      {
        "storage": "1",
        "varName": "embed",
        "message": "User that left: \n${tempVars(\"member\")}!",
        "name": "Set Embed Description"
      },
      {
        "storage": "1",
        "varName": "embed",
        "fieldName": "User Info:",
        "message": "Highest Role:\n${tempVars(\"role\")}\n\nLast Message sent:\n${tempVars(\"ms\") || \"None Recorded\"}\n\n\n\nMember since:\n${tempVars(\"disc\")}\n",
        "inline": "1",
        "name": "Add Embed Field"
      },
      {
        "storage": "1",
        "varName": "embed",
        "message": "\n",
        "footerIcon": "https://i.imgur.com/d3xbKQL.png",
        "name": "Set Embed Footer"
      },
      {
        "storage": "1",
        "varName": "embed",
        "channel": "5",
        "varName2": "channel",
        "name": "Send Embed Message"
      }
    ],
    "_id": "EvEn5"
  },
  {
    "name": "bot-dm-log-embed",
    "temp": "dm-msg",
    "event-type": "2",
    "actions": [
      {
        "behavior": "0",
        "interpretation": "1",
        "code": "tempVars(\"dm-msg\").member == null ? tempVars(\"dm-msg\").channel.recipient.username : \"\"",
        "storage": "1",
        "varName": "username",
        "name": "Run Script"
      },
      {
        "storage": "1",
        "varName": "username",
        "comparison": "0",
        "value": "",
        "iftrue": "0",
        "iftrueVal": "",
        "iffalse": "1",
        "iffalseVal": "",
        "name": "Check Variable"
      },
      {
        "behavior": "0",
        "interpretation": "1",
        "code": "tempVars(\"dm-msg\").content",
        "storage": "1",
        "varName": "msg-content",
        "name": "Run Script"
      },
      {
        "behavior": "0",
        "interpretation": "1",
        "code": "tempVars(\"dm-msg\").channel.recipient.avatarURL",
        "storage": "1",
        "varName": "auth_URL",
        "name": "Run Script"
      },
      {
        "info": "0",
        "find": "451303011495575562",
        "storage": "1",
        "varName": "server",
        "name": "Find Server"
      },
      {
        "server": "1",
        "varName": "server",
        "name": "Change Server"
      },
      {
        "info": "0",
        "find": "451465726893490203",
        "storage": "1",
        "varName": "logchannel",
        "name": "Find Channel"
      },
      {
        "title": "",
        "author": "ESO Assistant",
        "color": "#2256bf",
        "timestamp": "true",
        "url": "",
        "authorIcon": "https://i.imgur.com/zQadp8w.png",
        "imageUrl": "",
        "thumbUrl": "",
        "storage": "1",
        "varName": "e",
        "name": "Create Embed Message"
      },
      {
        "storage": "1",
        "varName": "e",
        "fieldName": "Message",
        "message": "${tempVars(\"msg-content\")}",
        "inline": "1",
        "name": "Add Embed Field"
      },
      {
        "behavior": "0",
        "interpretation": "0",
        "code": "tempVars(\"e\").setFooter(tempVars(\"username\"), tempVars(\"auth_URL\"))",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      },
      {
        "storage": "1",
        "varName": "e",
        "channel": "5",
        "varName2": "logchannel",
        "name": "Send Embed Message"
      }
    ],
    "_id": "SGVMp"
  },
  {
    "name": "botjoinedserver",
    "temp": "",
    "event-type": "4",
    "_id": "Ahlfs",
    "actions": [
      {
        "server": "0",
        "varName": "",
        "info": "2",
        "storage": "1",
        "varName2": "serverjoined",
        "name": "Store Server Info"
      },
      {
        "server": "1",
        "varName": "serverjoined",
        "info": "9",
        "storage": "1",
        "varName2": "defaultchannel",
        "name": "Store Server Info"
      },
      {
        "info": "0",
        "find": "451303011495575562",
        "storage": "1",
        "varName": "bots",
        "name": "Find Server"
      },
      {
        "server": "1",
        "varName": "bots",
        "info": "11",
        "storage": "1",
        "varName2": "name",
        "name": "Store Server Info"
      },
      {
        "title": "New server: ${tempVars(\"serverjoined\")}",
        "author": "",
        "color": "0000FF",
        "timestamp": "true",
        "url": "",
        "authorIcon": "",
        "imageUrl": "",
        "thumbUrl": "",
        "storage": "1",
        "varName": "msg",
        "name": "Create Embed Message"
      },
      {
        "storage": "1",
        "varName": "msg",
        "message": "The bot just joined ${tempVars(\"serverjoined\")}!",
        "name": "Set Embed Description"
      },
      {
        "storage": "1",
        "varName": "msg",
        "channel": "5",
        "varName2": "name",
        "name": "Send Embed Message"
      },
      {
        "server": "1",
        "varName": "bots",
        "name": "Change Server"
      },
      {
        "info": "1",
        "find": "joined-new-server",
        "storage": "1",
        "varName": "bot",
        "name": "Find Channel"
      },
      {
        "storage": "1",
        "varName": "msg",
        "channel": "5",
        "varName2": "bot",
        "name": "Send Embed Message"
      },
      {
        "name": "End Action Sequence"
      }
    ]
  },
  {
    "name": "nick name edit",
    "temp": "old",
    "event-type": "20",
    "actions": [
      {
        "storage": "1",
        "varName": "old",
        "comparison": "2",
        "value": "tempVars(\"new\")",
        "iftrue": "1",
        "iftrueVal": "",
        "iffalse": "0",
        "iffalseVal": "",
        "name": "Check Variable"
      },
      {
        "member": "2",
        "varName": "old",
        "info": "3",
        "storage": "1",
        "varName2": "old2",
        "name": "Store Member Info"
      },
      {
        "member": "2",
        "varName": "new",
        "info": "3",
        "storage": "1",
        "varName2": "new2",
        "name": "Store Member Info"
      },
      {
        "member": "2",
        "varName": "old",
        "info": "2",
        "storage": "1",
        "varName2": "uname",
        "name": "Store Member Info"
      },
      {
        "member": "2",
        "varName": "old",
        "info": "16",
        "storage": "1",
        "varName2": "pic",
        "name": "Store Member Info"
      },
      {
        "info": "1",
        "find": "bot-log",
        "storage": "1",
        "varName": "channel",
        "name": "Find Channel"
      },
      {
        "title": "BOT LOG",
        "author": "ESO Assistant",
        "color": "#2256bf",
        "timestamp": "true",
        "url": "",
        "authorIcon": "https://i.imgur.com/zQadp8w.png",
        "imageUrl": "",
        "thumbUrl": "${tempVars(\"pic\")}",
        "storage": "1",
        "varName": "embed",
        "name": "Create Embed Message"
      },
      {
        "storage": "1",
        "varName": "embed",
        "fieldName": "${tempVars(\"old2\") == tempVars(\"new2\") ? \"\" : \"Nick Name Changed\"}",
        "message": "Previous Name:\n```${tempVars(\"old2\")}```\nNew Name:\n```${tempVars(\"new2\")}```",
        "inline": "1",
        "name": "Add Embed Field"
      },
      {
        "storage": "1",
        "varName": "embed",
        "message": "${tempVars(\"uname\")} Changed their Nick Name",
        "footerIcon": "https://i.imgur.com/d3xbKQL.png",
        "name": "Set Embed Footer"
      },
      {
        "storage": "1",
        "varName": "old",
        "comparison": "1",
        "value": "tempVars(\"new\")",
        "iftrue": "1",
        "iftrueVal": "",
        "iffalse": "0",
        "iffalseVal": "",
        "name": "Check Variable"
      },
      {
        "storage": "1",
        "varName": "old2",
        "comparison": "2",
        "value": "tempVars(\"new2\")",
        "iftrue": "1",
        "iftrueVal": "",
        "iffalse": "0",
        "iffalseVal": "",
        "name": "Check Variable MOD"
      },
      {
        "storage": "1",
        "varName": "embed",
        "channel": "5",
        "varName2": "channel",
        "name": "Send Embed Message"
      }
    ],
    "_id": "JxouW",
    "temp2": "new"
  },
  {
    "name": "BookPages",
    "temp": "react",
    "event-type": "28",
    "_id": "nLdOq",
    "actions": [
      {
        "behavior": "1",
        "interpretation": "0",
        "code": "let react  = tempVars(\"react\")\nlet message = react.message;\nlet member = react.users.last();\n\nif(message.author.commandAuthorID == member.id && member.book){\n member.books[message.id] = member.book;\n\n if(react.emoji == \"⏪\" && member.books[message.id].page > 1){   \n   member.books[message.id].page -=1;   \n  }else if(react.emoji == \"⏩\" && member.books[message.id].page < member.books[message.id].pages.length){ \n    member.books[message.id].page +=1; \n  }\n  let embed = member.books[message.id].message;\n  embed.setDescription(member.books[message.id].pages[member.books[message.id].page-1].toString())\n  embed.setFooter(\"Page: \" + member.books[message.id].page +\"/\"+member.books[message.id].pages.length +\" Auridon's Library | via esoitem.uesp.net\")\n  message.edit(embed)\n  react.remove(member);\n}",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      }
    ]
  }
]